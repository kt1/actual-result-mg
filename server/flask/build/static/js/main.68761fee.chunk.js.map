{"version":3,"sources":["components/Post.jsx","components/PostList.jsx","containers/GetPostListContainer.jsx","components/App.jsx","reducers/postReducer.jsx","actions/Action.jsx","reducers/rootReducer.jsx","index.jsx"],"names":["Post","id","username","PostList","posts","map","post","index","key","GetPostList","connect","state","length","items","App","initalState","isFetching","action","type","lastUpdated","receivedAt","error","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","logger","dispatch","axios","get","then","res","data","Date","now","catch","err","render","document","getElementById"],"mappings":"0NAgBeA,EAbF,SAAC,GAAD,EAAGC,GAAH,IAAOC,EAAP,EAAOA,SAAP,OACX,4BACIA,ICiBSC,EAlBE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACf,4BACIA,EAAMC,KAAI,SAACC,EAAMC,GAAP,OACR,kBAAC,EAAD,eAAMC,IAAKD,GAAWD,SCMfG,EAJKC,aANI,SAACC,GACvB,IAAMC,EAASD,EAAMP,MAAMQ,OAE3B,MAAO,CAAER,MADYO,EAAMP,MAAMQ,EAAS,GACbC,SAGXH,CAElBP,GCAaW,EANH,kBACV,6BACE,kBAAC,EAAD,Q,wBCHIC,EAAc,CAClBC,YAAY,EACZH,MAAO,IAmCMT,EAhCD,WAAoC,IAAnCO,EAAkC,uDAA1B,CAACI,GAAcE,EAAW,uCAC/C,OAAQA,EAAOC,MACb,ICT2B,oBDUzB,MAAM,GAAN,mBACKP,GADL,CAEE,CACEK,YAAY,EACZH,MAAO,MAGb,ICV2B,oBDWzB,MAAM,GAAN,mBACKF,GADL,CAEE,CACEK,YAAY,EACZH,MAAOI,EAAOb,MACde,YAAaF,EAAOG,cAG1B,ICV2B,oBDWzB,MAAM,GAAN,mBACKT,GADL,CAEE,CACEK,YAAY,EACZK,MAAOJ,EAAOI,SAGpB,QACE,OAAOV,IE/BAW,EAJKC,YAAgB,CAClCnB,UCQIoB,EAAQC,YACVH,EACAI,YAAgBC,IAAOC,MAG3BJ,EAAMK,UFWG,SAACA,GAEN,OADAA,EAxBK,CACLX,KAH6B,sBA2BtBY,IAAMC,IAAN,4BACJC,MAAK,SAAAC,GAAG,OACPJ,EApBC,CACLX,KAH6B,oBAI7Bd,MAkB6B6B,EAAIC,KAjBjCd,WAAYe,KAAKC,WAkBbC,OAAM,SAAAC,GAAG,OACTT,EAbC,CACLX,KAH6B,oBAI7BG,MAW6BiB,UEfjCC,iBACA,kBAAC,IAAD,CAAUf,MAAOA,GACb,kBAAC,EAAD,OAEJgB,SAASC,eAAe,W","file":"static/js/main.68761fee.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Post = ({ id, username }) => (\n  <li>\n    { username }\n  </li>\n)\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    username: PropTypes.string.isRequired\n  })\n}\n\nexport default Post","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Post from './Post'\n\nconst PostList = ({ posts }) => (\n  <ul>\n    { posts.map((post, index) => \n        <Post key={index} {...post}/>\n      )\n    }\n  </ul>\n)\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.nubmer.isRequired,\n      username: PropTypes.string.isRequired\n    }).isRequired\n  ).isRequired\n}\n\nexport default PostList","import {connect} from 'react-redux'\nimport PostList from '../components/PostList'\n\nconst mapStateToProps = (state) => {    \n  const length = state.posts.length\n  const currentState = state.posts[length - 1]  // 一番新しいstateを取り出す\n  return { posts: currentState.items }  // 描画するのに必要なのはとりあえずitemsだけなのでitemsだけ返す\n}\n\nconst GetPostList = connect(\n  mapStateToProps\n)(PostList)\n\nexport default GetPostList","import React from 'react';\n// import Form from './Form';\n// import List from  './List';\nimport GetPostList from '../containers/GetPostListContainer'\n\nconst App = () => (  \n  <div>\n    <GetPostList />\n  </div>\n)\n\nexport default App\n\n// export default class App extends Component {\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       todo: []\n//     };\n//     this.handleAdd = this.handleAdd.bind(this);\n//     this.handleRemove = this.handleRemove.bind(this);\n//   }\n  \n//   // データ保存\n//   handleAdd(e){\n//     // リダイレクト防止\n//     e.preventDefault();\n//     // フォームから受け取ったデータをオブジェクトに挿入して、stateのtodo配列に追加\n//     this.state.todo.push({title: e.target.title.value}); // まだ保存されていない\n//     // setStateを使ってstateを上書き\n//     this.setState({todo: this.state.todo}); // 保存完了\n//     // inputのvalueを空に\n//     e.target.title.value = '';\n//   }\n\n//   // データ削除\n//   handleRemove(i){\n//     // todo配列からi番目から1つ目のデータを除外\n//     this.state.todo.splice(i,1);\n//     // setStateでtodo配列を上書き\n//     this.setState({todo: this.state.todo});\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"siimple-box siimple--bg-dark\">\n//         <h1 className=\"siimple-box-title siimple--color-white\">React Todo App</h1>\n//         <Form handleAdd={this.handleAdd}/>\n//         <div className=\"siimple-rule\"></div>\n//         <List todos={this.state.todo} handleRemove={this.handleRemove}/>\n//       </div>\n//     );\n//   }\n// }","import {\n    GET_POSTS_REQUEST, GET_POSTS_SUCCESS, GET_POSTS_FAILURE\n  } from '../actions/Action'\n  \n  const initalState = {\n    isFetching: false,\n    items: []\n  }\n  \n  const posts = (state = [initalState], action) => {    \n    switch (action.type) {\n      case GET_POSTS_REQUEST:\n        return [\n          ...state,\n          {\n            isFetching: true,\n            items: []\n          }\n        ]\n      case GET_POSTS_SUCCESS:\n        return [\n          ...state,\n          {\n            isFetching: false,\n            items: action.posts,\n            lastUpdated: action.receivedAt\n          }\n        ]\n      case GET_POSTS_FAILURE:\n        return [\n          ...state,\n          {\n            isFetching: false,\n            error: action.error\n          }\n        ]\n      default:\n        return state\n    }\n  }\n  \n  export default posts","import axios from 'axios'\n\nexport const GET_POSTS_REQUEST = 'GET_POSTS_REQUEST'\nconst getPostsRequest = () => {\n  return {\n    type: GET_POSTS_REQUEST\n  }\n}\n\nexport const GET_POSTS_SUCCESS = 'GET_POSTS_SUCCESS'\nconst getPostsSuccess = (json) => {  \n  return {\n    type: GET_POSTS_SUCCESS,\n    posts: json,\n    receivedAt: Date.now()\n  }\n}\n\nexport const GET_POSTS_FAILURE = 'GET_POSTS_FAILURE'\nconst getPostsFailure = (error) => {\n  return {\n    type: GET_POSTS_FAILURE,\n    error\n  }\n}\n\nexport const getPosts = () => {\n  return (dispatch) => {\n    dispatch(getPostsRequest())\n    return axios.get(`http://0.0.0.0:8000/user`)\n      .then(res =>\n        dispatch(getPostsSuccess(res.data))\n      ).catch(err => \n        dispatch(getPostsFailure(err))\n      )\n  }\n}","import { combineReducers } from 'redux'\nimport posts from './postReducer'\nconst rootReducer = combineReducers({\n  posts\n})\n\nexport default rootReducer","import React from 'react';\nimport { render }  from 'react-dom';\n// import * as serviceWorker from './serviceWorker';\nimport thunk from 'redux-thunk'\nimport logger from 'redux-logger'\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport rootReducer from './reducers/rootReducer'\nimport { getPosts } from './actions/Action'\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunk, logger)\n  )\n  \nstore.dispatch(getPosts())\n\nrender(\n<Provider store={store}>\n    <App />\n</Provider>,\ndocument.getElementById('root')\n)\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();"],"sourceRoot":""}